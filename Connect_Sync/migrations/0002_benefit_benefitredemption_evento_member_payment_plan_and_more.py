# Generated by Django 5.2.5 on 2025-08-19 03:03

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Connect_Sync', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Benefit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('provider', models.CharField(max_length=200)),
                ('discount_code', models.CharField(max_length=50, unique=True)),
                ('discount_percentage', models.IntegerField()),
                ('redeem_url', models.URLField()),
                ('available_quantity', models.IntegerField(blank=True, null=True)),
                ('used_quantity', models.IntegerField(default=0)),
                ('valid_from', models.DateTimeField()),
                ('valid_until', models.DateTimeField()),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Benefit',
                'verbose_name_plural': 'Benefits',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BenefitRedemption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('redeemed_at', models.DateTimeField(auto_now_add=True)),
                ('used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('unique_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('benefit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Connect_Sync.benefit')),
            ],
            options={
                'verbose_name': 'Benefit Redemption',
                'verbose_name_plural': 'Benefit Redemptions',
                'ordering': ['-redeemed_at'],
            },
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('event_date', models.DateTimeField()),
                ('location', models.CharField(max_length=300)),
                ('description', models.TextField()),
                ('speaker', models.CharField(blank=True, max_length=200)),
                ('event_type', models.CharField(default='Tech Talk', max_length=50)),
                ('max_attendees', models.IntegerField(blank=True, null=True)),
                ('requires_membership', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Evento',
                'verbose_name_plural': 'Eventos',
                'ordering': ['event_date'],
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('password_hash', models.CharField(blank=True, max_length=255)),
                ('area_tecnologia', models.CharField(blank=True, max_length=50)),
                ('empresa_atual', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Member',
                'verbose_name_plural': 'Members',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('method', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('pix', 'PIX'), ('bank_transfer', 'Bank Transfer')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('transaction_id', models.CharField(blank=True, max_length=100)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='Connect_Sync.member')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('monthly_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField()),
                ('annual_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('color_theme', models.CharField(default='#007bff', max_length=7)),
                ('active', models.BooleanField(default=True)),
                ('order', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Plan',
                'verbose_name_plural': 'Plans',
                'ordering': ['order', 'monthly_price'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('next_billing', models.DateTimeField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('auto_renew', models.BooleanField(default=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='Connect_Sync.member')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Connect_Sync.plan')),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat', models.CharField(blank=True, max_length=20)),
                ('qr_code', models.CharField(max_length=100, unique=True)),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
                'ordering': ['-purchased_at'],
            },
        ),
        migrations.DeleteModel(
            name='TestModel',
        ),
        migrations.AddField(
            model_name='benefitredemption',
            name='member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Connect_Sync.member'),
        ),
        migrations.AddField(
            model_name='evento',
            name='allowed_plans',
            field=models.ManyToManyField(blank=True, to='Connect_Sync.plan'),
        ),
        migrations.AddField(
            model_name='benefit',
            name='plans',
            field=models.ManyToManyField(related_name='benefits', to='Connect_Sync.plan'),
        ),
        migrations.AddField(
            model_name='payment',
            name='subscription',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='Connect_Sync.subscription'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='evento',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='Connect_Sync.evento'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='Connect_Sync.member'),
        ),
        migrations.AlterUniqueTogether(
            name='benefitredemption',
            unique_together={('member', 'benefit')},
        ),
        migrations.AlterUniqueTogether(
            name='ticket',
            unique_together={('owner', 'evento')},
        ),
    ]
